<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>全端開發人員天梯</title>
        <link>https://fullstackladder.dev/</link>
        <description>軟體開發學不完，就像爬不完的天梯，只好多紀錄寫筆記</description>
        <lastBuildDate>Sun, 16 Oct 2022 03:49:36 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh</language>
        <copyright>All rights reserved 2021, Mike Huang</copyright>
        <item>
            <title><![CDATA[[Chrome DevTools] 透過開發者工具動態切換暗黑模式]]></title>
            <link>https://fullstackladder.dev/blog/2022/10/16/change-prefers-color-scheme-by-dev-tools</link>
            <guid>https://fullstackladder.dev/blog/2022/10/16/change-prefers-color-scheme-by-dev-tools</guid>
            <pubDate>Sun, 16 Oct 2022 10:47:15 GMT</pubDate>
            <description><![CDATA[<p>Dark mode (暗黑模式) 已經逐漸成為現代網頁開發的主流，很多網站也都逐漸加入的對 dark mode 的支援，讓網站預設也可以跟著作業系統的深色或淺色模式自動切換</p>
<p>雖然顏色偏好讓使用者體驗更好，但也確實增加了網站開發時期的負擔，我們必須同時測試兩種顏色模式的顯示效果，如果每次測試都要主動切換系統的模式，也未免太辛苦了！還好 Chrome DevTools 內建了主題切換，讓我們可以直接在開發工具切換目前網頁的顯示模式，大幅度的節省時間，今天就來看看如何在深色和淺色模式之間自由的切換！</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[Angular 大師之路] 透過 DI 容器修正第三方元件的 bug]]></title>
            <link>https://fullstackladder.dev/blog/2022/10/07/angular-advanced-using-di-to-fix-third-party-bugs</link>
            <guid>https://fullstackladder.dev/blog/2022/10/07/angular-advanced-using-di-to-fix-third-party-bugs</guid>
            <pubDate>Fri, 07 Oct 2022 20:08:13 GMT</pubDate>
            <description><![CDATA[<p>最進公司內某個專案遇到了一個 bug 是因為第三方套件的已知 bug 導致，但又不可能等人家修好 bug 我們才能處理，於是來詢問我的想法；其實這並不是一個很難的問題，尤其是在 Angular 這種完整個框架下，透過 DI 容器就可以輕易的達成，只是不一定想得到而已，由於大多數我們會使用到 Angular 的 DI 機制常常都是再進行一些組態設定，難得有個案例是用來修 bug 的，就用這篇文章來記錄一下！</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[NgRx 速成班] 用 Effects 讓元件持續保持單純]]></title>
            <link>https://fullstackladder.dev/blog/2022/08/07/ngrx-05-effects</link>
            <guid>https://fullstackladder.dev/blog/2022/08/07/ngrx-05-effects</guid>
            <pubDate>Sun, 07 Aug 2022 09:01:34 GMT</pubDate>
            <description><![CDATA[<p>前幾天我們已經講 NgRx 狀態管理最重要的幾個核心角色 - Store、Selector、Action 和 Reducer 介紹過了；今天我們來講講 NgRx 另外一個很重要的角色 - Effects。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[NgRx 速成班] 更改狀態的基礎 Action & Reducer]]></title>
            <link>https://fullstackladder.dev/blog/2022/08/03/ngrx-04-action-reducer</link>
            <guid>https://fullstackladder.dev/blog/2022/08/03/ngrx-04-action-reducer</guid>
            <pubDate>Wed, 03 Aug 2022 16:27:30 GMT</pubDate>
            <description><![CDATA[<p>上篇文章我們介紹了 <a href="2022/08/01/ngrx-02-schematics/">NgRx 的 Store 和 Selector</a>，這兩個角色主要是用來存放資料及讀取資料用的，接著我們來看看如何更新儲存的資料 - Action 和 Reducer。</p>
<p>一樣的，基本的程式骨架已經在「<a href="/blog/2022/08/01/ngrx-02-schematics/">使用 NgRx Schematics 快速產生程式碼骨架</a>」建立，接下來將會直接沿用產生出來的程式骨架，繼續調整程式碼。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[NgRx 速成班] 讀取狀態的基礎 Store & Selector]]></title>
            <link>https://fullstackladder.dev/blog/2022/08/02/ngrx-03-store-selector</link>
            <guid>https://fullstackladder.dev/blog/2022/08/02/ngrx-03-store-selector</guid>
            <pubDate>Tue, 02 Aug 2022 10:30:00 GMT</pubDate>
            <description><![CDATA[<p>對 NgRx 基本架構和程式碼有了一些概念後，接著來看一下如何將狀態讀取出來給程式使用，這會利用到 Store 與 Selector 兩個角色。</p>
<p>基本的程式骨架再上一篇「<a href="/blog/2022/08/01/ngrx-02-schematics/">使用 NgRx Schematics 快速產生程式碼骨架</a>」已經說明過了，這邊將會直接沿用產生出來的程式骨架，繼續調整程式碼。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[NgRx 速成班] 使用 NgRx Schematics 快速產生程式碼骨架]]></title>
            <link>https://fullstackladder.dev/blog/2022/08/01/ngrx-02-schematics</link>
            <guid>https://fullstackladder.dev/blog/2022/08/01/ngrx-02-schematics</guid>
            <pubDate>Mon, 01 Aug 2022 11:47:42 GMT</pubDate>
            <description><![CDATA[<p>在之前的文章「<a href="https://fullstackladder.dev/blog/2022/04/17/ngrx-01-introduce/">簡介 NgRx</a>」中我們間單的的解釋了 NgRx 的一些基本角色，每個角色都有他的工作，也代表著我們要把一件事情拆成多個角色去負責，每個角色都會有各自獨立的程式碼，我們可以使用 <a href="https://ngrx.io/guide/schematics">@ngrx/schematics</a> 套件來快速的幫助我們產生所有需要的程式碼！</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[移除 ModuleConcatenationPlugin 以加快 Angular 建置速度]]></title>
            <link>https://fullstackladder.dev/blog/2022/07/29/speed-up-angular-build-time-by-remove-module-concatenation-plugin</link>
            <guid>https://fullstackladder.dev/blog/2022/07/29/speed-up-angular-build-time-by-remove-module-concatenation-plugin</guid>
            <pubDate>Fri, 29 Jul 2022 08:33:49 GMT</pubDate>
            <description><![CDATA[<p>最近接手一個專案，需要將舊 Angular 9 專案加入之前客戶沒有實作的 lazy loading 功能，專案包含了將近 600 個頁面，之後還會增加。</p>
<p>重構的過程是很順利的，不過在 lazy loading 架構完成後，卻出現了 production build 時間大幅增加的問題，花費了不少時間研究，總算是以較低的代價換回了 build 速度。</p>
<p>這篇文章就來分享一下整個過程和結論。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[如何在 Azure CloudShell 上傳/下載檔案]]></title>
            <link>https://fullstackladder.dev/blog/2022/07/05/azure-cloudshell-upload-download-file</link>
            <guid>https://fullstackladder.dev/blog/2022/07/05/azure-cloudshell-upload-download-file</guid>
            <pubDate>Tue, 05 Jul 2022 18:51:20 GMT</pubDate>
            <description><![CDATA[<p>Azure CloudShell 可以幫助我們直接在 Azure Portal 上直接下指令進行各種資源的操作，不過偶爾我們需要將地端的檔案上傳到 Azure CloudShell 或是需要將在 Azure CloudShell 上面的檔案下載下來，今天分享一些小技巧，讓我們可以輕鬆的在 Azure CloudShell 上傳/下載檔案。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[使用 inject() 簡化建構式注入的內容]]></title>
            <link>https://fullstackladder.dev/blog/2022/05/21/angular-inject-usage-sample</link>
            <guid>https://fullstackladder.dev/blog/2022/05/21/angular-inject-usage-sample</guid>
            <pubDate>Sat, 21 May 2022 21:44:05 GMT</pubDate>
            <description><![CDATA[<p>Angular 14 將加強原有的 <a href="https://angular.io/api/core/inject">inject</a> 功能，讓我們在元件的建構式內可以直接透過呼叫 <code>inject(...)</code> 取得原本所有可以在建構式注入的內容，這種做法可以大幅簡化原來建構式的程式，但也可能帶來一些問題，今天就來看一下神奇的 <code>inject()</code> 新用法。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[搶先體驗強型別表單（Strict Typed Reactive Forms）]]></title>
            <link>https://fullstackladder.dev/blog/2022/05/15/angular-14-strict-typed-reactive-forms</link>
            <guid>https://fullstackladder.dev/blog/2022/05/15/angular-14-strict-typed-reactive-forms</guid>
            <pubDate>Sun, 15 May 2022 12:09:06 GMT</pubDate>
            <description><![CDATA[<p>Angular 14 即將推出強型別的 Reactive Forms 表單功能，讓我們在開發過程中可以享受強型別定義帶來的好處，不用再擔心弱型別不小心打錯字等等問題，今天就來看一下如何使用強型別的表單功能！</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[搶先體驗 Standalone Components / Directives / Pipes]]></title>
            <link>https://fullstackladder.dev/blog/2022/05/14/angular-14-standalone-components-directives-pipe-preview</link>
            <guid>https://fullstackladder.dev/blog/2022/05/14/angular-14-standalone-components-directives-pipe-preview</guid>
            <pubDate>Sat, 14 May 2022 08:42:44 GMT</pubDate>
            <description><![CDATA[<p>Angular 14 預計會推出一個重磅功能 - 「Standalone Components / Directives / Pipes」！這個功能允許我們「獨立」的使用 components、directives 和 pipes，不用再強制依靠 <code>@NgModule</code>。</p>
<p>目前 Angular 14 已經推出 RC.0 了，這個版本內也包含了 Standalone 的開發人員預覽版本（developer preview of standalone），讓我們可以搶先體驗一下這種<strong>獨立使用元件</strong>的版本，這篇文章就來介紹一下為什麼要使用 Standalone 以及該如何使用。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[NgRx 速成班] 簡介 NgRx]]></title>
            <link>https://fullstackladder.dev/blog/2022/04/17/ngrx-01-introduce</link>
            <guid>https://fullstackladder.dev/blog/2022/04/17/ngrx-01-introduce</guid>
            <pubDate>Sun, 17 Apr 2022 11:47:42 GMT</pubDate>
            <description><![CDATA[<p>NgRx 是一個強大，且功能完整的 Angular 狀態管理套件，在我們的應用程式越來越複雜的時候，它很適合用來管理一些全域的狀態，並透過適度的抽象化以及加入一定的規範，降低整體程式的耦合性，打造出更好維護及管理的程式碼。</p>
<p>接下來的一系列文章將會介紹 NgRx 的核心精神，使用方式及相關工具。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[node.js] 打造美觀的互動式 CLI 介面]]></title>
            <link>https://fullstackladder.dev/blog/2022/03/06/node-packages-to-create-beauty-cli</link>
            <guid>https://fullstackladder.dev/blog/2022/03/06/node-packages-to-create-beauty-cli</guid>
            <pubDate>Sun, 06 Mar 2022 20:00:33 GMT</pubDate>
            <description><![CDATA[<p>前陣子在 Youtube 上看到了一部影片，介紹了好幾個 node.js 的套件，來幫助我們打造漂亮的 CLI，才後知後覺的發現一直在使用的 Angular CLI、Schematics 等等，許多由 node.js 開發的 CLI 工具，背後那些美觀的畫面都是基於這些套件，而不是自己刻的，所以整理了一下這些套件的介紹與示範！</p>
<p><img src="./assets/blog/node-packages-to-create-beauty-cli/00.png" alt="" title=""  loading="lazy" /></p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[Angular 進階議題] 減少 moment.js 造成 bundle 檔案過大的問題]]></title>
            <link>https://fullstackladder.dev/blog/2022/02/26/reduce-moment-bundle-size-in-angular</link>
            <guid>https://fullstackladder.dev/blog/2022/02/26/reduce-moment-bundle-size-in-angular</guid>
            <pubDate>Sat, 26 Feb 2022 18:34:27 GMT</pubDate>
            <description><![CDATA[<p><a href="https://momentjs.com/">momentjs</a>，可以說是最多人使用的老牌 JavaScript 時間處理類別庫；當然，隨著技術的進步，momentjs 也有不少議題被提出，其中最大的問題就是檔案太過龐大了，且隨著現在前端技術的發展，我們經常使用 webpack 等工具將前端程式進行打包，同時過濾 (tree shaking) 要不要的程式，以減少整體檔案大小。</p>
<p>而 momentjs 由於原始設計的關係，在做 tree shaking 的時候會無法移除掉用不到的 API，同時還有龐大的語系檔，嚴重影響最終 bundle 檔案大小。</p>
<p>抱怨歸抱怨，momentjs 還是非常多人在用，因此只能盡量的做到減少大小，至少不要把龐大的語系檔一起 bundle 進來。</p>
<p>Angular 過去是將 webpack 整個封裝起來的，而隨著版本推移，現在也能自訂 webpack 了，今天就來看一下如何在 Angular 中自訂 webpack，同時移除 momentjs 中過大的語系檔。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[如何將 Word/Excel 等檔案內容貼到網頁上]]></title>
            <link>https://fullstackladder.dev/blog/2022/02/14/how-to-paste-word-excel-to-web</link>
            <guid>https://fullstackladder.dev/blog/2022/02/14/how-to-paste-word-excel-to-web</guid>
            <pubDate>Mon, 14 Feb 2022 22:36:33 GMT</pubDate>
            <description><![CDATA[<p>源自前陣子我們家業務問的問題：「客戶原來的系統能將 Excel 儲存格內容貼到網頁上，我們辦得到嗎？」。</p>
<p>實際上當然是肯定的，但還真的沒有特別嘗試過該如何做到，花了點時間研究發現也沒那麼困難，也把一些種點整理一下，以免以後自己忘記。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[Inno Setup] CI 時自動產生安裝檔（以 Azure DevOps 為例）]]></title>
            <link>https://fullstackladder.dev/blog/2022/02/06/inno-setup-continuous-integration-with-azure-devops</link>
            <guid>https://fullstackladder.dev/blog/2022/02/06/inno-setup-continuous-integration-with-azure-devops</guid>
            <pubDate>Sun, 06 Feb 2022 18:06:42 GMT</pubDate>
            <description><![CDATA[<p>透過 Inno Setup 打包安裝檔非常方便，由於都是腳本指令，加上 Inno Setup 本身也支援以 CLI 的方式執行，因此要搭配 CI/CD 是完全可行的，本篇就以 <a href="https://azure.microsoft.com/en-us/services/devops/?WT.mc_id=DOP-MVP-500373">Azure DevOps</a> 為例，說明一下使用 Inno Setup 打包安裝檔需要注意的一些事項。</p>
<p>以下為使用 Pipeline as code 的方式說明，因此都是 yaml 設定檔，當然如果使用 Classic editor 的話，也都可以找到對應的 task</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[Inno Setup] 安裝時設定環境變數 (Registry)]]></title>
            <link>https://fullstackladder.dev/blog/2022/02/06/inno-setup-environment-path-registry-by-code</link>
            <guid>https://fullstackladder.dev/blog/2022/02/06/inno-setup-environment-path-registry-by-code</guid>
            <pubDate>Sun, 06 Feb 2022 14:46:04 GMT</pubDate>
            <description><![CDATA[<p>有些時候，我們的程式會提供 CLI 指令給使用者，讓使用者可以自行下指令進行一些自動化的操作，這些 CLI 當然也都是執行檔，為了執行方便我們可以將程式位置加入 <code>Path</code> 環境變數，讓使用者可以直接輸入指令，而不用知道程式的所在位置。</p>
<p>在 Inno Setup 該如何做到安裝時自動把指令路徑加入 <code>path</code> 環境變數呢？</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[Inno Setup] 讓程式在系統登入時自動開啟執行]]></title>
            <link>https://fullstackladder.dev/blog/2022/02/05/inno-setup-install-with-startup</link>
            <guid>https://fullstackladder.dev/blog/2022/02/05/inno-setup-install-with-startup</guid>
            <pubDate>Sat, 05 Feb 2022 15:00:39 GMT</pubDate>
            <description><![CDATA[<p>很多時候我們會希望常用程式能在登入時自動開啟執行，這麼一來可以省去我們手動去開啟程式的時間；當使用 Inno Setup 打包安裝檔時，我們也可以將程式設定成開機自動執行。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[Inno Setup] 包裝安裝檔時顯示中文]]></title>
            <link>https://fullstackladder.dev/blog/2022/02/03/inno-setup-utf8-chinese-support</link>
            <guid>https://fullstackladder.dev/blog/2022/02/03/inno-setup-utf8-chinese-support</guid>
            <pubDate>Thu, 03 Feb 2022 18:59:52 GMT</pubDate>
            <description><![CDATA[<p>Inno Setup 內建多種語言的安裝檔，不過內建不支援繁體中文，雖然文件上有非官方語言包可以下載，但還是有一些地雷在，這篇文章就簡單記錄一下。</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[[Inno Setup] 使用精靈產生的腳本解說]]></title>
            <link>https://fullstackladder.dev/blog/2022/02/03/inno-setup-script-explain</link>
            <guid>https://fullstackladder.dev/blog/2022/02/03/inno-setup-script-explain</guid>
            <pubDate>Thu, 03 Feb 2022 15:42:20 GMT</pubDate>
            <description><![CDATA[<p>前一篇我們提到<a href="https://fullstackladder.dev/blog/2022/02/02/inno-setup-quick-start/">使用 Inno Setup 的腳本精靈來產生安裝檔腳本</a>，並編譯這個腳本來建立安裝檔，不過這個腳本精靈通常只會使用一次，因為產出的檔案是無法再次使用腳本精靈設定的，因此最終我們還是需要自行去維護這個腳本，今天就來看一下預設使用腳本精靈產生的內容有哪些，未來要維護或新增功能時就可以更容易上手了。</p>
]]></description>
        </item>
    </channel>
</rss>